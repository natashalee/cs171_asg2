#!/usr/bin/env python3
import sys
import queue
import time
import socket
import threading
import math
import select


class site(object):
	def __init__(self, site_id, setup_file, command_file):
		super(site, self).__init__()

		self.site_id = int(site_id)
		self.setup_file = setup_file
		self.command_file = command_file


		self.incoming_channels = list()
		self.outgoing_channels = list()
		self.queue_data = list()
		self.snapshots = list()
		self.snap_count = 0
		self.port_id_and_number = {}

		self.local_bank = 10



	def open_connections(self):
		total_sites = int(self.setup_file[0])
		TCP_IP = "127.0.0.1"
		TCP_PORT_SELF = self.site_id

		receiving_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		receiving_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		receiving_socket.bind((TCP_IP, TCP_PORT_SELF))
		receiving_socket.listen(1)


		self.incoming_channels.append(0) #stub, this way we can start index at 1
		self.outgoing_channels.append(0) #stub, this way we can start index at 1
		self.queue_data.append(0)


		for i in range(1, total_sites+1): 
			port_id = int(self.setup_file[i].split(" ")[1].rstrip()) #gets all the listed port ids 
			self.port_id_and_number[i] = port_id #can use dict to search for portid
			self.port_id_and_number[port_id] = i
			self.incoming_channels.append(None)
			self.outgoing_channels.append(None)
			q = queue.Queue()
			self.queue_data.append(q)



	
		#SOCKET WORK, CONNECT ALL SOCKETS
		for i in range(total_sites+1, len(self.setup_file)):
			links = self.setup_file[i].rstrip().split(" ")

			site_id_from = int(links[0]) 					#ex: 1, 2..
			site_id_to = int(links[1]) 						#ex: 1, 2..

			from_port = self.port_id_and_number[site_id_from] 	#ex: 5001, 5002,...
			to_port = self.port_id_and_number[site_id_to] 		#ex: 5001, 5002,...

			if(from_port == self.site_id):
				time.sleep(5)
				dest_addr = (TCP_IP, to_port)

				s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				s.connect(dest_addr)
				self.outgoing_channels[site_id_to] = s
			
			elif(to_port == self.site_id):
				time.sleep(5)
				stream, addr = receiving_socket.accept()
				self.incoming_channels[site_id_from] = stream
		print("connections made")



	def read_commands(self):
		for i in self.command_file:
			if(i.find("send") != -1): #IF SEND
				i = i.strip("send ")
				site_id_to = int(i[0])	#ex: 1, 2,... 

				amount = int(i[2]) 		#money amount sending
				self.send_money(amount, site_id_to)
				self.receive()

			elif(i.find("sleep") != -1): #IF SLEEP
				print(int(i.strip("sleep ")))
				time.sleep(int(i.strip("sleep ")))


			elif(i.find("snapshot") != -1): #IF SNAPSHOT
				self.take_snapshot()





	def send_money(self, amount, to_id):
		self.local_bank -= amount
		print("sent: " + str(amount) + " local bank: " + str(self.local_bank))
		s = self.outgoing_channels[to_id]
		s.sendall(str(amount).encode())


	def receive(self):
		for i in range(1, len(self.incoming_channels)):
			s = self.incoming_channels[i]
			
			if s != None:
				data = s.recv(1024).decode()
				if data:
					self.queue_data[i].put(data)
					current = self.queue_data[i].get()
					if(str(current).find("marker") != -1): #if marker
						print("marker received")
					else:
						self.local_bank += int(current)
						print("received:" + str(current) + " local bank: " + str(self.local_bank))

		return

	def take_snapshot(self):
		self.snap_count+=1
		curr_snap_id = str(self.port_id_and_number[self.site_id]) + "." + str(self.snap_count) + ": " + str(self.local_bank)
		self.snapshots.append(curr_snap_id)
		self.send_marker()
		return


	def send_marker(self):
		print("send marker stub!")
		return


	def close_connections(self):
		for i in range(1, len(self.outgoing_channels)):
			s = self.outgoing_channels[i]
			if s != None:
				s.close()
			s2 = self.incoming_channels[i]
			if s2 != None:
				s2.close()

def main():
	args = sys.argv
	if (len(args)!=4):
		print("Usage: <port_id> <setup file> <command file> ")
		print(args)
		return

	site_id = args[1]
	setup_file= open(args[2], 'r')
	command_file = open(args[3], 'r')
	new_site = site(site_id, setup_file.readlines(), command_file.readlines())
	new_site.open_connections()
	time.sleep(5)
	new_site.read_commands()
	time.sleep(5)
	new_site.close_connections()

if __name__ == "__main__":
    main() 




